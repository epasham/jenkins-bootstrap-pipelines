#!groovy

library 'kentrikos-shared-library'
pipeline {
    options {
        timeout(time: 60, unit: 'MINUTES')
    }
    environment {
        ENV_K8S_DIR = 'env-eks'
    }
    agent any
    stages {

        gitCloneConfigRepo

        stage('Init') {
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    withProxyEnv() {
                        sshagent(['bitbucket-key']) {
                            sh '''#!/bin/bash -x
                            terraform init -input=false \
                            -backend-config="region=${AWS_REGION}" \
                            -backend-config="bucket=tf-${AWS_OPERATIONS_ACCOUNT_NUMBER}-ops-${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}" \
                            -backend-config="dynamodb_table=tf-state-lock-bootstrap-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}" \
                            -backend-config="key=tf/tf-aws-product-domain-${PRODUCT_DOMAIN_NAME}-env-${ENVIRONMENT_TYPE}/${ENV_K8S_DIR}/terraform.tfstate"
                            '''
                        }
                    }
                }
            }
        }

        terraformPlan dir: "operations/$AWS_REGION/$ENV_K8S_DIR"
        terraformApply dir: "operations/$AWS_REGION/$ENV_K8S_DIR"


        stage('Retrieve kubeconfig') {
            steps {
                withProxyEnv() {
                    sh '''#!/bin/bash -x
                       aws eks update-kubeconfig --name ${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}-ops --region ${AWS_REGION}
                       '''
                }
            }
        }
    }
}
