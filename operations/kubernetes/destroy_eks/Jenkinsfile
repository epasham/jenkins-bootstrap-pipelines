#!groovy
library 'kentrikos-shared-library'

pipeline {
    agent any
    environment {
        ENV_K8S_DIR = 'env-eks'
    }
    stages {
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }
        stage('Init') {
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    withProxyEnv() {
                        sshagent(['bitbucket-key']) {
                            sh '''#!/bin/bash -x
                            terraform init -input=false \
                            -backend-config="region=${AWS_REGION}" \
                            -backend-config="bucket=tf-${AWS_OPERATIONS_ACCOUNT_NUMBER}-ops-${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}" \
                            -backend-config="dynamodb_table=tf-state-lock-bootstrap-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}" \
                            -backend-config="key=tf/tf-aws-product-domain-${PRODUCT_DOMAIN_NAME}-env-${ENVIRONMENT_TYPE}/${ENV_K8S_DIR}/terraform.tfstate"
                            '''
                        }
                    }
                }
            }
        }
        stage('Plan') {
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '/usr/bin/terraform plan -destroy -var-file="../terraform.tfvars" -out=tfplandestroy -input=false'
                        }
                    }
                }
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '/usr/bin/terraform apply -input=false tfplandestroy'
                        }
                    }
                }
            }
        }
    }
}
