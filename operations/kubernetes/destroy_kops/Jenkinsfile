#!groovy

library 'kentrikos-shared-library'
pipeline {
    agent any
    environment {
        ENV_K8S_DIR = 'env-kops'
        OPERTION_DIR = "operations/$AWS_REGION/$ENV_K8S_DIR"
    }
    stages {
        stage('Git clone') {
            steps {
                gitCloneConfigRepo()
            }
        }
        stage('Init') {
            steps {
                terraformInitOperations dir: "$OPERTION_DIR", subcomponent: "${ENV_K8S_DIR}"
            }
        }
        stage('Plan') {
            steps {
                terraformPlanDestroy dir: "$OPERTION_DIR"
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                terraformApplyDestroy dir: "$OPERTION_DIR"
            }
        }
        stage('Kops check') {
            steps {
                dir("operations/$AWS_REGION/$ENV_K8S_DIR") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '''#!/bin/bash -x
                            K8S_CLUSTER_NAME="${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}-ops.k8s.local"
                            KOPS_STATE_BUCKET="kops-${AWS_OPERATIONS_ACCOUNT_NUMBER}-${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}-ops"
                            if kops --state s3://${KOPS_STATE_BUCKET} get cluster ${K8S_CLUSTER_NAME};
                            then
                              echo "Seems that Terraform has not destroyed the cluster, perhaps it was not fully deployed and marked as tainted resource."
                              echo "Deleting directly with kops..."
                              kops --state s3://${KOPS_STATE_BUCKET} delete cluster ${K8S_CLUSTER_NAME} --yes
                            else
                              echo "Looks like the cluster has beed finally destroyed."
                            fi
                            '''
                        }
                    }
                }
            }
        }
    }
}
