#!groovy

library 'kentrikos-shared-library'
pipeline {

    agent any

    parameters {
        choice(name: 'K8S_FLAVOR', choices: ["eks", "kops"],
                description: 'Choose type of Kubernetes cluster (required for kops)')
    }

    stages {
        stage('Git local config') {
            steps {
                sh 'git config --global --add user.name "example"'
                sh 'git config --global --add user.email "example@example.com"'
            }
        }
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }

        stage('Get K8s cluster flavor') {
            steps {
                script {
                    if (env.K8S_FLAVOR == "eks") {
                        K8S_CLUSTER_NAME = "arn:aws:eks:$AWS_REGION:$AWS_OPERATIONS_ACCOUNT_NUMBER:cluster/$AWS_REGION-$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE-ops"
                    } else {
                        K8S_CLUSTER_NAME = "$AWS_REGION-$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE-ops.k8s.local"
                    }
                    println K8S_CLUSTER_NAME
                }
            }
        }

        stage('Switch kubectl context to ops') {
            steps {
                dir("operations/$AWS_REGION/env-$K8S_FLAVOR") {
                    script {
                        sh "kubectl config use-context $K8S_CLUSTER_NAME"
                    }
                }
            }
        }

        stage('Check/create LMA namespace') {
            steps {
                dir("operations/$AWS_REGION/env-$K8S_FLAVOR") {
                    withProxyEnv() {
                        script {
                            sh '''
                            #!/bin/bash -x
                            if ! kubectl get namespace lma;
                            then 
                                echo "Namespace for LMA does not exist, creating..."
                                kubectl create namespace lma
                            fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy Grafana') {
            steps {
                dir("operations/$AWS_REGION/env-$K8S_FLAVOR") {
                    withProxyEnv() {
                        script {
                            def grafana_parameters = readYaml file: 'grafana/parameters.yaml'
                            def jenkins_parameters = readYaml file: 'jenkins/parameters.yaml'

                            println "Getting domain name"
                            def r53DomainName = sh(script: "aws route53 get-hosted-zone --id " + jenkins_parameters.jxDomainHostedZoneID + " --output text --query 'HostedZone.Name'",
                                    returnStdout: true).trim().replaceAll("\\.\$", "")
                            def grafana_address = "grafana." + jenkins_parameters.jxDomainAliasPrefix + "." + r53DomainName

                            sh """
                            #!/bin/bash
                            helm install --replace --wait --name grafana --namespace lma stable/grafana \
                            --set=ingress.enabled=true,ingress.hosts={$grafana_address},adminPassword=$grafana_parameters.defaultAdminPassword
                            """
                        }
                    }
                }
            }
        }
    }
}
