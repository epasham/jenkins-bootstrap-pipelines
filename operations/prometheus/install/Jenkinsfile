#!groovy

pipeline {

    agent any
    stages {
        stage('Git local config') {
            steps {
                sh 'git config --global --add user.name "example"'
                sh 'git config --global --add user.email "example@example.com"'
            }
        }
        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }

        stage('Switch kubectl context to ops') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    script {
                      sh "kubectl config use-context $AWS_REGION-$PRODUCT_DOMAIN_NAME-$ENVIRONMENT_TYPE-ops.k8s.local"
                    }
                }
            }
        }

       stage('Read DNS domain') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    withProxyEnv() {
                        script {
                            def jenkinsParameters = readYaml file: 'jenkins/parameters.yaml'

                            println "Getting domain name"
                            def r53DomainName = sh(script: "aws route53 get-hosted-zone --id " + jenkinsParameters.jxDomainHostedZoneID + " --output text --query 'HostedZone.Name'", 
                                                   returnStdout: true).trim().replaceAll("\\.\$", "")
                            prometheusEndpoint = "http://prometheus." + jenkinsParameters.jxDomainAliasPrefix + "." + r53DomainName
                            grafanaEndpoint = "http://grafana." + jenkinsParameters.jxDomainAliasPrefix + "." + r53DomainName
                        }
                    }
                }
            }
        }

        stage('Deploy Prometheus/operations') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    withProxyEnv() {
                        script {
                            sh """
                            #!/bin/bash
                            helm install --replace --wait --name prometheus_ops --namespace kube-system stable/prometheus \
                            --set=ingress.enabled=true,ingress.hosts={$prometheusEndpoint}
                            """
                        }
                    }
                }
            }
        }
 
        stage('Add Prometheus/operations data-source to Grafana') {
            steps {
                dir("operations/$AWS_REGION/env") {
                    withProxyEnv() {
                        script {
                            def grafanaParameters = readYaml file: 'grafana/parameters.yaml'
                            def grafanaAdminPassword = grafanaParameters.defaultAdminPassword
                            def requestJson = """
                            {
                              "name": "Prometheus_ops",
                              "isDefault": false,
                              "type": "prometheus",
                              "url": "${prometheusEndpoint}",
                              "access": "proxy",
                              "basicAuth": true,
                              "basicAuthUser": "admin",
                              "basicAuthPassword": "admin"
                            }
                            """
                            sh "curl --verbose --user admin:${grafanaAdminPassword} ${grafanaEndpoint}/api/datasources -X POST -H 'Content-Type: application/json;charset=UTF-8' --data-binary '${requestJson}'"
                        }
                    }
                }
            }
        }
    }
}

void withProxyEnv(List envVars = [], def body) {
    List proxies = []
    List envVaraibles = ['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no']
    withAWSParameterStore(credentialsId: '', namePrefixes: '', naming: 'absolute', path: '/proxy', recursive: true, regionName: "$AWS_REGION") {
        script {
            if (env.PROXY_HTTP) {
                proxies << "http_proxy=$PROXY_HTTP"
            }
            if (env.PROXY_HTTPS) {
                proxies << "https_proxy=$PROXY_HTTPS"
            }
            if (env.PROXY_NO) {
                proxies << "no_proxy=$PROXY_NO"
            }
            envVaraibles.addAll(proxies)
        }
    }
    envVaraibles.addAll(envVars)
    withEnv(envVaraibles) {
        body.call()
    }
}
