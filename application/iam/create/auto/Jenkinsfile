#!groovy

library 'kentrikos-shared-library'
pipeline {

    agent any
    stages {

        stage('Git clone') {
            steps {
                cleanWs()
                git credentialsId: 'bitbucket-key', url: '$CONFIG_REPO_URL'
            }
        }
        stage('Init') {
            steps {
                dir("application/$AWS_REGION/iam/auto") {
                    withProxyEnv() {
                        sshagent(['bitbucket-key']) {
                            sh '''#!/bin/bash -x
                            terraform init \
                                -backend-config=\"region=${AWS_REGION}\" \
                                -backend-config=\"bucket=tf-${AWS_APPLICATION_ACCOUNT_NUMBER}-app-${AWS_REGION}-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}\" \
                                -backend-config=\"key=tf/tf-aws-product-domain-${PRODUCT_DOMAIN_NAME}-env-${ENVIRONMENT_TYPE}/iam/terraform.tfstate\" \
                                -backend-config=\"dynamodb_table=tf-state-lock-bootstrap-${PRODUCT_DOMAIN_NAME}-${ENVIRONMENT_TYPE}\" \
                                -backend-config=\"role_arn=arn:aws:iam::${AWS_APPLICATION_ACCOUNT_NUMBER}:role/KENTRIKOS_${AWS_REGION}_${PRODUCT_DOMAIN_NAME}_${ENVIRONMENT_TYPE}_CrossAccount\"
                            '''
                        }
                    }
                }
            }
        }
        stage('Plan') {
            steps {
                dir("application/$AWS_REGION/iam/auto") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '/usr/bin/terraform plan -var-file="../../terraform.tfvars" -out=tfplan -input=false'
                        }
                    }
                }
            }
        }
        stage('Apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                dir("application/$AWS_REGION/iam/auto") {
                    ansiColor('xterm') {
                        withProxyEnv() {
                            sh '/usr/bin/terraform apply -input=false tfplan'
                        }
                    }
                    archiveArtifacts artifacts: 'outputs/**'
                }
            }
        }
    }
}
